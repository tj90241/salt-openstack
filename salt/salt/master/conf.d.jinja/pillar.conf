{%- import_yaml 'salt/defaults.yaml' as salt_defaults -%}

#####         Pillar settings        #####
##########################################
# Salt Pillars allow for the building of global data that can be made selectively
# available to different minions based on minion grain filtering. The Salt
# Pillar is laid out in the same fashion as the file server, with environments,
# a top file and sls files. However, pillar data does not need to be in the
# highstate format, and is generally just key/value pairs.
{#- Ordering is important, and salt_defaults[...] | yaml discards ordering... #}
pillar_roots: {
{%- for env, roots in salt_defaults['master']['pillar_roots'].items() %}
  {{ env }}: {{ roots | yaml }},
{%- endfor %}
}

ext_pillar: {{ salt_defaults['master']['ext_pillar'] | yaml }}

# The pillar_source_merging_strategy option allows you to configure merging
# strategy between different sources. It accepts five values: none, recurse,
# aggregate, overwrite, or smart. None will not do any merging at all. Recurse
# will merge recursively mapping of data. Aggregate instructs aggregation of
# elements between sources that use the #!yamlex renderer. Overwrite will
# overwrite elements according the order in which they are processed. This is
# behavior of the 2014.1 branch and earlier. Smart guesses the best strategy
# based on the "renderer" setting and is the default value.
pillar_source_merging_strategy: {{ salt_defaults['master']['pillar_source_merging_strategy'] | yaml }}
