{%- set chrony = pillar.get('chrony', {}) -%}
{%- set server_defaults = chrony.get('server_defaults', {}) -%}
{%- set iburst_default = server_defaults.get('iburst', False) -%}
{%- set maxpoll_default = server_defaults.get('maxpoll', None) -%}
{%- set minpoll_default = server_defaults.get('minpoll', None) -%}
{%- set xleave_default = server_defaults.get('xleave', False) -%}
# Welcome to the chrony configuration file. See chrony.conf(5) for more
# information about usuable directives.
{%- for pool in chrony.get('pools', []) %}
{%- if pool is mapping %}
{%- set address, options = pool.items() | first %}
{%- set iburst = options.get('iburst', iburst_default) %}
{%- set maxpoll = options.get('maxpoll', maxpoll_default) %}
{%- set minpoll = options.get('minpoll', minpoll_default) %}
{%- set xleave = options.get('xleave', xleave_default) %}
{%- else %}
{%- set address = pool %}
{%- set iburst = iburst_default %}
{%- set maxpoll = maxpoll_default %}
{%- set minpoll = minpoll_default %}
{%- set xleave = xleave_default %}
{%- endif %}
pool {{ address }}{{ ' minpoll ' + minpoll | string if minpoll else '' }}{{ ' maxpoll ' + maxpoll | string if maxpoll else '' }}{{ ' iburst' if iburst else '' }}{{ ' xleave' if xleave else '' }}
{%- endfor %}
{%- set servers = chrony.get('servers', []) %}
{%- if servers | length == 0 %}
{%- set servers = [grains.ip4_gw] %}
{%- endif %}
{%- for server in servers %}
{%- if server is mapping %}
{%- set address, options = server.items() | first %}
{%- set iburst = options.get('iburst', iburst_default) %}
{%- set maxpoll = options.get('maxpoll', maxpoll_default) %}
{%- set minpoll = options.get('minpoll', minpoll_default) %}
{%- set xleave = options.get('xleave', xleave_default) %}
{%- else %}
{%- set address = server %}
{%- set iburst = iburst_default %}
{%- set maxpoll = maxpoll_default %}
{%- set minpoll = minpoll_default %}
{%- set xleave = xleave_default %}
{%- endif %}
server {{ address }}{{ ' minpoll ' + minpoll | string if minpoll else '' }}{{ ' maxpoll ' + maxpoll | string if maxpoll else '' }}{{ ' iburst' if iburst else '' }}{{ ' xleave' if xleave else '' }}
{%- endfor %}

# This directive specify the location of the file containing ID/key pairs for
# NTP authentication.
keyfile /etc/chrony/chrony.keys

# This directive specify the file into which chronyd will store the rate
# information.
driftfile /var/lib/chrony/chrony.drift

# Uncomment the following line to turn logging on.
#log tracking measurements statistics

# Log files location.
logdir /var/log/chrony

# Stop bad estimates upsetting machine clock.
maxupdateskew 100.0

# This directive enables kernel synchronisation (every 11 minutes) of the
# real-time clock. Note that it canâ€™t be used along with the 'rtcfile' directive.
rtcsync

# Step the system clock instead of slewing it if the adjustment is larger than
# one second, but only in the first three clock updates.
makestep 1 3
{%- if 'hwtimestamp' in chrony %}

# This directive enables hardware timestamping of NTP packets sent to and
# received from the specified network interface. The network interface
# controller (NIC) uses its own clock to accurately timestamp the actual
# transmissions and receptions, avoiding processing and queueing delays in
# the kernel, network driver, and hardware. This can significantly improve
# the accuracy of the timestamps and the measured offset, which is used for
# synchronisation of the system clock. In order to get the best results, both
# sides receiving and sending NTP packets (i.e. server and client, or two
# peers) need to use HW timestamping. If the server or peer supports the
# interleaved mode, it needs to be enabled by the xleave option in the server
# or the peer directive.
{%- for interface in chrony['hwtimestamp'] %}
hwtimestamp {{ interface }}
{%- endfor %}
{%- endif %}
{%- if 'timeserver' in grains.get('roles', []) %}

# On Linux, this directive uses the sched_setscheduler() system call to instruct
# the kernel to use the SCHED_FIFO first-in, first-out real-time scheduling
# policy for chronyd with the specified priority. This means that whenever
# chronyd is ready to run it will run, interrupting whatever else is running
# unless it is a higher priority real-time process.
#
# This should not impact performance as chronyd resource requirements are
# modest, but it should result in lower and more consistent latency since
# chronyd will not need to wait for the scheduler to get around to running it. 
sched_priority 10

# Allow everyone on the local network to sync with us.
{%- for cidr in chrony.get('allow', {}) %}
allow {{ cidr }}
{%- endfor %}
{%- endif %}
