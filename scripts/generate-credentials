#!/bin/bash

# Apt
# TODO: Better way to distribute the GPG keys?
export GNUPGHOME="/etc/salt/file_tree_pillar/hosts/apt/gpg"
mkdir -p "${GNUPGHOME}"
chmod -v 0750 "${GNUPGHOME}"

# GPG configuration
cat <<- EOF > "${GNUPGHOME}/gpg.conf"
# Prioritize stronger algorithms for new keys.
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 BZIP2 ZLIB ZIP Uncompressed
# Use a stronger digest than the default SHA1 for certifications.
cert-digest-algo SHA512
personal-digest-preferences SHA256
EOF

# GPG key generation
GPG_PASSPHRASE=$( </dev/urandom tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 16 )

cat > "${GNUPGHOME}/apt.conf" <<- EOF
%echo Generating the aptly OpenPGP key
Key-Type: eddsa
Key-Curve: Ed25519
Key-Usage: cert
Subkey-Type: eddsa
Subkey-Curve: Ed25519
Subkey-Usage: sign,auth
Name-Real: Apt Role Account
Name-Email: apt@$( hostname -d )
Expire-Date: 0
Passphrase: ${GPG_PASSPHRASE}
%commit
%echo ...done
EOF

cd "${GNUPGHOME}"
gpg2 --batch --generate-key "${GNUPGHOME}/apt.conf"
rm "${GNUPGHOME}"/{apt.conf,gpg.conf,trustdb.gpg}
unset GNUPGHOME

cat <<- PASSWORD_SENTINEL > /srv/pillar/apt/gpg.sls
apt:
  gpg:
    passphrase: '${GPG_PASSPHRASE}'
PASSWORD_SENTINEL

# Consul
cat <<- PASSWORD_SENTINEL > /srv/pillar/consul/key.sls
consul:
  key: '`/usr/local/bin/consul keygen`'
PASSWORD_SENTINEL

# DevPI
cat <<- PASSWORD_SENTINEL > /srv/pillar/devpi/root.sls
devpi:
  users:
    root: 
      password: '$( </dev/urandom tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 16 )'
PASSWORD_SENTINEL

cat <<- PASSWORD_SENTINEL > /srv/pillar/openstack/devpi/user.sls
devpi:
  users:
    openstack: 
      password: '$( </dev/urandom tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 16 )'
PASSWORD_SENTINEL

# Docker
cat <<- PASSWORD_SENTINEL > /srv/pillar/docker/registry.sls
docker:
  registry:
    users:
      salt: 
        password: '$( </dev/urandom tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 16 )'
PASSWORD_SENTINEL

# Jenkins
mkdir -p /srv/pillar/jenkins/credentials
touch /srv/pillar/jenkins/credentials/init.sls
KEYPAIR_DIR=$( mktemp -d )
ssh-keygen -qt ed25519 -N '' -f "${KEYPAIR_DIR}/jenkins"
ssh-keygen -qt rsa -B 8192 -N '' -f "${KEYPAIR_DIR}/jenkins-apt"

cat <<- PASSWORD_SENTINEL > /srv/pillar/jenkins/credentials/controller.sls
jenkins:
  controller:
    jks:
      password: '$( </dev/urandom tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 16 )'

    keypair:
      private: |
PASSWORD_SENTINEL

while read -r line;
do
   echo "        ${line}" >> /srv/pillar/jenkins/credentials/controller.sls;
done < "${KEYPAIR_DIR}/jenkins"

cat <<- PASSWORD_SENTINEL >> /srv/pillar/jenkins/credentials/controller.sls

  publish:
    keypair:
      private: |
PASSWORD_SENTINEL

      while read -r line;
do
   echo "        ${line}" >> /srv/pillar/jenkins/credentials/controller.sls;
done < "${KEYPAIR_DIR}/jenkins-apt"

cat <<- PASSWORD_SENTINEL > /srv/pillar/jenkins/credentials/apt-node.sls
jenkins:
  apt-node:
    user:
      name: jenkins
      password: '$( </dev/urandom tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 16 )'

  publish:
    keypair:
      public: |
PASSWORD_SENTINEL

while read -r line;
do
   echo "        ${line}" >> /srv/pillar/jenkins/credentials/apt-node.sls;
done < "${KEYPAIR_DIR}/jenkins-apt.pub"

cat <<- PASSWORD_SENTINEL > /srv/pillar/jenkins/credentials/node.sls
jenkins:
  node:
    user:
      name: jenkins
      password: '$( </dev/urandom tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 16 )'

  controller:
    keypair:
      public: |
PASSWORD_SENTINEL

while read -r line;
do
   echo "        ${line}" >> /srv/pillar/jenkins/credentials/node.sls;
done < "${KEYPAIR_DIR}/jenkins.pub"

rm -rfv "${KEYPAIR_DIR}"

cat <<- PASSWORD_SENTINEL > /srv/pillar/jenkins/credentials/salt.sls
jenkins:
  users:
    salt:
      password: '$( </dev/urandom tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 16 )'
PASSWORD_SENTINEL
